//
//  YZNumberKeyboardViewStyle.swift
//  YZNumberKeyboardView
//
//  Created by Yichi Zhang on 13/03/2015.
//  Copyright (c) 2015 Yichi Zhang. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class YZNumberKeyboardViewStyle : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfDismissKeyBoardImage: UIImage?
        static var dismissKeyBoardImageTargets: [AnyObject]?
        static var imageOfArrowLight: UIImage?
        static var arrowLightTargets: [AnyObject]?
        static var imageOfArrowDark: UIImage?
        static var arrowDarkTargets: [AnyObject]?
    }

    //// Drawing Methods

    public class func drawDismissKeyBoardImage() {
        //// Color Declarations
        let color = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Rectangle 12 Drawing
        let rectangle12Path = UIBezierPath(rect: CGRectMake(0, 0, 50, 24))
        UIColor.grayColor().setFill()
        rectangle12Path.fill()


        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(8, 4, 24, 15), cornerRadius: 3)
        color.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRectMake(11, 6.5, 2, 2))
        color.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRectMake(15, 6.5, 2, 2))
        color.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRectMake(19, 6.5, 2, 2))
        color.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRectMake(23, 6.5, 2, 2))
        color.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRectMake(27, 6.5, 2, 2))
        color.setFill()
        rectangle6Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRectMake(25, 10.5, 2, 2))
        color.setFill()
        rectangle7Path.fill()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRectMake(21, 10.5, 2, 2))
        color.setFill()
        rectangle8Path.fill()


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRectMake(17, 10.5, 2, 2))
        color.setFill()
        rectangle9Path.fill()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRectMake(13, 10.5, 2, 2))
        color.setFill()
        rectangle10Path.fill()


        //// Rectangle 11 Drawing
        let rectangle11Path = UIBezierPath(rect: CGRectMake(14, 14.5, 12, 2))
        color.setFill()
        rectangle11Path.fill()




        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(36, 12))
        bezierPath.addLineToPoint(CGPointMake(38, 12))
        bezierPath.addLineToPoint(CGPointMake(38, 5))
        bezierPath.addLineToPoint(CGPointMake(39, 5))
        bezierPath.addLineToPoint(CGPointMake(39, 12))
        bezierPath.addLineToPoint(CGPointMake(41, 12))
        bezierPath.addLineToPoint(CGPointMake(38.5, 18))
        bezierPath.addLineToPoint(CGPointMake(36, 12))
        bezierPath.closePath()
        color.setFill()
        bezierPath.fill()
    }

    public class func drawArrowLight() {

        //// Bezier 2 Drawing
        var bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(1, 3))
        bezier2Path.addLineToPoint(CGPointMake(9, 3))
        bezier2Path.addLineToPoint(CGPointMake(5, 7))
        bezier2Path.addLineToPoint(CGPointMake(1, 3))
        bezier2Path.closePath()
        UIColor.whiteColor().setFill()
        bezier2Path.fill()
    }

    public class func drawArrowDark() {
        //// Color Declarations
        let color = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier 2 Drawing
        var bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(1, 3))
        bezier2Path.addLineToPoint(CGPointMake(9, 3))
        bezier2Path.addLineToPoint(CGPointMake(5, 7))
        bezier2Path.addLineToPoint(CGPointMake(1, 3))
        bezier2Path.closePath()
        color.setFill()
        bezier2Path.fill()
    }

    //// Generated Images

    public class var imageOfDismissKeyBoardImage: UIImage {
        if Cache.imageOfDismissKeyBoardImage != nil {
            return Cache.imageOfDismissKeyBoardImage!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 24), false, 0)
            YZNumberKeyboardViewStyle.drawDismissKeyBoardImage()

        Cache.imageOfDismissKeyBoardImage = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDismissKeyBoardImage!
    }

    public class var imageOfArrowLight: UIImage {
        if Cache.imageOfArrowLight != nil {
            return Cache.imageOfArrowLight!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(10, 10), false, 0)
            YZNumberKeyboardViewStyle.drawArrowLight()

        Cache.imageOfArrowLight = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfArrowLight!
    }

    public class var imageOfArrowDark: UIImage {
        if Cache.imageOfArrowDark != nil {
            return Cache.imageOfArrowDark!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(10, 10), false, 0)
            YZNumberKeyboardViewStyle.drawArrowDark()

        Cache.imageOfArrowDark = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfArrowDark!
    }

    //// Customization Infrastructure

    @IBOutlet var dismissKeyBoardImageTargets: [AnyObject]! {
        get { return Cache.dismissKeyBoardImageTargets }
        set {
            Cache.dismissKeyBoardImageTargets = newValue
            for target: AnyObject in newValue {
                target.setImage(YZNumberKeyboardViewStyle.imageOfDismissKeyBoardImage)
            }
        }
    }

    @IBOutlet var arrowLightTargets: [AnyObject]! {
        get { return Cache.arrowLightTargets }
        set {
            Cache.arrowLightTargets = newValue
            for target: AnyObject in newValue {
                target.setImage(YZNumberKeyboardViewStyle.imageOfArrowLight)
            }
        }
    }

    @IBOutlet var arrowDarkTargets: [AnyObject]! {
        get { return Cache.arrowDarkTargets }
        set {
            Cache.arrowDarkTargets = newValue
            for target: AnyObject in newValue {
                target.setImage(YZNumberKeyboardViewStyle.imageOfArrowDark)
            }
        }
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
